use std::collections::BTreeMap;
use std::env;
use std::fs::File;
use std::io::Write;
use std::path::PathBuf;

use reqwest::Client;
use serde::{Deserialize, Serialize};

const URL: &str = "https://docs.discord.food/api/codes";

#[derive(Serialize, Deserialize, Debug)]
struct Response {
	name: String,
	index: u16,
	codes: BTreeMap<String, String>,
}

#[tokio::main]
async fn main() {
	let client = Client::new();

	let text = client.get(URL).send().await.unwrap().text().await.unwrap();
	let response_json: Vec<Response> = serde_json::from_str(&text).unwrap();

	let root: PathBuf = PathBuf::from(env::var("CARGO_MANIFEST_DIR").unwrap()).join("../..");
	let errors_file = root.join("crates/discord-types/src/common/error_codes.rs");

	let mut file = File::create(&errors_file).unwrap();

	let mut code = String::from(
		"//! Autogenerated file via `scripts/update-error-codes`\n\nuse phf::phf_map;\n\nstatic ERROR_CODES: phf::Map<u32, &'static str> = phf_map! {\n",
	);

	for group in &response_json {
		for (error_code, description) in &group.codes {
			code.push_str(&format!("\t{}u32 => \"{}\",\n", error_code, description));
		}
	}

	code.push_str("};\n");

	code.push_str(
		"\ntrait ErrorCode {\n\tfn get_error_group(&self) -> &str;\n}\n\nimpl ErrorCode for u32 {\n\tfn get_error_group(&self) -> &str {\n\t\treturn match self / 10_000 {\n"
	);

	for group in response_json {
		code.push_str(&format!("\t\t\t| {} => \"{}\",\n", group.index, group.name));
	}

	code.push_str("\t\t\t| _ => \"Unknown group\",\n\t\t};\n\t}\n}\n");

	file.write_all(code.as_bytes()).unwrap();
}
